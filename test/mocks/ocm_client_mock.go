/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-aws/v2/pkg/rosa (interfaces: OCMClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift-online/ocm-sdk-go/clustersmgmt/v1"
)

// MockOCMClient is a mock of OCMClient interface.
type MockOCMClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCMClientMockRecorder
}

// MockOCMClientMockRecorder is the mock recorder for MockOCMClient.
type MockOCMClientMockRecorder struct {
	mock *MockOCMClient
}

// NewMockOCMClient creates a new mock instance.
func NewMockOCMClient(ctrl *gomock.Controller) *MockOCMClient {
	mock := &MockOCMClient{ctrl: ctrl}
	mock.recorder = &MockOCMClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCMClient) EXPECT() *MockOCMClientMockRecorder {
	return m.recorder
}

// CreateNodePool mocks base method.
func (m *MockOCMClient) CreateNodePool(arg0 string, arg1 *v1.NodePool) (*v1.NodePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodePool", arg0, arg1)
	ret0, _ := ret[0].(*v1.NodePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodePool indicates an expected call of CreateNodePool.
func (mr *MockOCMClientMockRecorder) CreateNodePool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodePool", reflect.TypeOf((*MockOCMClient)(nil).CreateNodePool), arg0, arg1)
}

// DeleteNodePool mocks base method.
func (m *MockOCMClient) DeleteNodePool(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodePool indicates an expected call of DeleteNodePool.
func (mr *MockOCMClientMockRecorder) DeleteNodePool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodePool", reflect.TypeOf((*MockOCMClient)(nil).DeleteNodePool), arg0, arg1)
}

// GetHypershiftNodePoolUpgrade mocks base method.
func (m *MockOCMClient) GetHypershiftNodePoolUpgrade(arg0, arg1, arg2 string) (*v1.NodePool, *v1.NodePoolUpgradePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHypershiftNodePoolUpgrade", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.NodePool)
	ret1, _ := ret[1].(*v1.NodePoolUpgradePolicy)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetHypershiftNodePoolUpgrade indicates an expected call of GetHypershiftNodePoolUpgrade.
func (mr *MockOCMClientMockRecorder) GetHypershiftNodePoolUpgrade(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHypershiftNodePoolUpgrade", reflect.TypeOf((*MockOCMClient)(nil).GetHypershiftNodePoolUpgrade), arg0, arg1, arg2)
}

// GetNodePool mocks base method.
func (m *MockOCMClient) GetNodePool(arg0, arg1 string) (*v1.NodePool, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePool", arg0, arg1)
	ret0, _ := ret[0].(*v1.NodePool)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodePool indicates an expected call of GetNodePool.
func (mr *MockOCMClientMockRecorder) GetNodePool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePool", reflect.TypeOf((*MockOCMClient)(nil).GetNodePool), arg0, arg1)
}

// ScheduleHypershiftControlPlaneUpgrade mocks base method.
func (m *MockOCMClient) ScheduleHypershiftControlPlaneUpgrade(arg0 string, arg1 *v1.ControlPlaneUpgradePolicy) (*v1.ControlPlaneUpgradePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleHypershiftControlPlaneUpgrade", arg0, arg1)
	ret0, _ := ret[0].(*v1.ControlPlaneUpgradePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleHypershiftControlPlaneUpgrade indicates an expected call of ScheduleHypershiftControlPlaneUpgrade.
func (mr *MockOCMClientMockRecorder) ScheduleHypershiftControlPlaneUpgrade(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleHypershiftControlPlaneUpgrade", reflect.TypeOf((*MockOCMClient)(nil).ScheduleHypershiftControlPlaneUpgrade), arg0, arg1)
}

// ScheduleNodePoolUpgrade mocks base method.
func (m *MockOCMClient) ScheduleNodePoolUpgrade(arg0, arg1 string, arg2 *v1.NodePoolUpgradePolicy) (*v1.NodePoolUpgradePolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleNodePoolUpgrade", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.NodePoolUpgradePolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleNodePoolUpgrade indicates an expected call of ScheduleNodePoolUpgrade.
func (mr *MockOCMClientMockRecorder) ScheduleNodePoolUpgrade(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleNodePoolUpgrade", reflect.TypeOf((*MockOCMClient)(nil).ScheduleNodePoolUpgrade), arg0, arg1, arg2)
}

// UpdateNodePool mocks base method.
func (m *MockOCMClient) UpdateNodePool(arg0 string, arg1 *v1.NodePool) (*v1.NodePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodePool", arg0, arg1)
	ret0, _ := ret[0].(*v1.NodePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodePool indicates an expected call of UpdateNodePool.
func (mr *MockOCMClientMockRecorder) UpdateNodePool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodePool", reflect.TypeOf((*MockOCMClient)(nil).UpdateNodePool), arg0, arg1)
}
